<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大数据学习之HDFS</title>
      <link href="posts/e1db.html"/>
      <url>posts/e1db.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、存储模型"><a href="#一、存储模型" class="headerlink" title="一、存储模型"></a>一、存储模型</h2><ul><li>文件线性按字节切割成Block块存储，具有offset、id</li><li>文件于文件的Block块大小可以不一样，可以调整</li><li>一个文件除最后一个Block块，其他Block块大小一致</li><li>Block的大小依据硬件的I/O特性调整</li><li>Block块被分散存放在集群节点中，具有location</li><li>Block块具有副本（replication），没有主从概念，副本不能出现在同一节点</li><li>副本是满足可靠性和性能的关键</li><li>文件上传可以指定Block块大小和副本数量，上传后只能修改副本数</li><li>一次写入多次读取，不支持修改</li><li>支持追加数据</li></ul><p>  关于文件修改：文件上传后Block块大小是既定的，如果修改一个块级数据，大小发生改变，则之后所有的block块都得调整，offset也要更新，就会造成资源过度使用，因此HDFS设计只是为计算做存储，舍弃一部分特性而满足其他性能极致提升。</p><h2 id="二、架构设计"><a href="#二、架构设计" class="headerlink" title="二、架构设计"></a>二、架构设计</h2><ul><li>主从（Master/Slaver）架构</li><li>由NameNode和DataNode组成</li><li>面向文件，包括文件数据和文件元数据</li><li>NameNode负责存储和管理文件元数据，并维护了一个层次性文件目录树</li><li>DataNode负责存储文件数据（Block块），并提供Block块的读写能力</li><li>DataNode与NameNode维持心跳，并汇报自己持有的Block信息</li><li>Client和NameNode交互文件元数据，和DataNode交互文件Block数据</li></ul><h2 id="三、角色功能"><a href="#三、角色功能" class="headerlink" title="三、角色功能"></a>三、角色功能</h2><img src="/posts/e1db/hdfs.jpg" class=""><ul><li><p>NameNode：</p><p>完全基于内存存储文件元数据、目录结构、文件Block的映射</p><p>需要持久化方案保证数据可靠性</p><p>提供副本放置策略</p></li><li><p>DataNode：</p><p>基于本地磁盘存储Block(文件的形式)</p><p>并保存Block的校验和和数据，保证Block的可靠性</p><p>与NameNode保持心跳，汇报Block列表状态</p></li><li><p>SecondaryNameNode</p><p>在非HA模式下，SNN一般为独立节点，周期性完成对NN得EditLog向FI合并，减少EL大小，减少NN启动时间</p><p>根据配置文件设置的时间间隔(fs.checkpoint.period)，默认为3600秒</p><p>根据配置文件设置EL大小(fs.checkpoint.size)，规定EL文件最大默认值64MB</p></li></ul><h2 id="四、持久化方案"><a href="#四、持久化方案" class="headerlink" title="四、持久化方案"></a>四、持久化方案</h2><h3 id="1、基于文件存储持久化的两种方案："><a href="#1、基于文件存储持久化的两种方案：" class="headerlink" title="1、基于文件存储持久化的两种方案："></a>1、基于文件存储持久化的两种方案：</h3><ul><li><p>append日志：</p><p>记录操作日志，实时写入、完整性好、加载回复数据慢、占用空间多</p></li><li><p>快照：</p><p>内存全量数据基于某一时间点向磁盘异步复制、恢复速度快，容易丢失数据、占用I/O资源</p></li></ul><h3 id="2、HDFS方案"><a href="#2、HDFS方案" class="headerlink" title="2、HDFS方案"></a>2、HDFS方案</h3><ul><li><p>EditsLog：日志</p><p>数据丢失少，但恢复速度慢，并由体积膨胀的风险</p></li><li><p>FsImage：镜像、快照</p><p>滚动更新时点，但不能实时保存，数据丢失多</p></li></ul><p>  HDFS采用最近时点的<code>FsImage</code>+增量的<code>EditsLog</code>的整合方案,比如现在10点=9点的FsImage+9点到10点间增量的EditsLog。FI滚动更新策略：将9-10点的增量EL更新到9点的FI=10点的FI，并由</p><h3 id="3、安全策略"><a href="#3、安全策略" class="headerlink" title="3、安全策略"></a>3、安全策略</h3><ul><li>HDFS搭建时会格式化，格式化操作会产生一个空的FsImage</li><li>当NameNode启动时，会从硬盘种读取EditLog和FsImage</li><li>将所有EditLog种的事务作用在内存中的FsImage</li><li>并将这个新版本的FsImage从内存保存到本地磁盘上</li><li>然后删除旧的EditLog，因为这个旧的EditLog的事务已经作用在FsImae上了</li><li>NameNode启动后会进入一个称为安全模式的特殊状态</li><li>处于安全模式的NameNode是不会进行数据块的复制的</li><li>NameNode从所有的DataNode接收心跳信号和块状态报告</li><li>每当NameNode检测确认某个数据块的副本数目达到这个最小值，那么该数据块就会被认为是副本安全的</li><li>在一定百分比的数据块被NameNode检测确认是安全之后（加上一个额外30秒的等待时间），NameNode将退出安全模式</li><li>接下来它会确认还有哪些数据块的副本没有达到指定数目，并将这些数据块复制到其他DataNode上</li></ul><p>为什么不持久化Bolck块的存储信息，而要靠安全策略加载：保证数据一致性，NameNode不可用或者数据被破坏，因此由NN上报</p><h2 id="五、Block块副本放置策略"><a href="#五、Block块副本放置策略" class="headerlink" title="五、Block块副本放置策略"></a>五、Block块副本放置策略</h2><ul><li>第一个副本：放置在上传文件的DN；如果是集群外提价，则随机挑选一台磁盘不太慢、CPU不太忙的节点（就近，快）</li><li>第二个副本放置在与第一个副本存放服务器机架不同的节点（出机架，防止整个机架挂了不可用）</li><li>第三个节点放置在与前两个副本存放服务器机架相同的节点（就近迁移）</li><li>更多副本则随机节点</li></ul><h2 id="六、读写流程"><a href="#六、读写流程" class="headerlink" title="六、读写流程"></a>六、读写流程</h2><h3 id="1、写流程"><a href="#1、写流程" class="headerlink" title="1、写流程"></a>1、写流程</h3><img src="/posts/e1db/write.jpg" class=""><ul><li>client和NN连接创建文件元数据（NN触发副本放置策略，返回一个有序的DN列表）</li><li>NN通过最终DN上报的Block存储信息判定元数据是否有效再存储</li><li>client和DN建立Pipeline连接，只与最近的第一个连接，DNS之间会相互连接，构成一个Pipeline</li><li>client将块切分成packet（64KB）的数据包，并使用chunk（512B）+4B的校验位填充，用于数据校验</li><li>cleint将packet放入dataQueue队列，发送到第一个DN，DN存储成功一个packet就会响应一个ack放入ackQueue</li><li>第一个DN接收到packet本地保存并发给第二个，第二个接收到本地保存并发给第三个，同时client端继续发送下一个packet，形成流式传输</li><li>流式也是一种变种的并行计算</li><li>当Block传输完，DN各自向NN汇报，同时client继续传输下一个Block，并行</li></ul><h3 id="2、读流程"><a href="#2、读流程" class="headerlink" title="2、读流程"></a>2、读流程</h3><img src="/posts/e1db/read.jpg" class=""><ul><li><p>client先询问NN，获取元数据，返回文件的块数据列表</p></li><li><p>为了降低网络带宽和读取延迟，HDFS会尽量让client读取离他最近的副本</p></li><li><p>如果读取程序同节点上存在DN,就读取同节点的，否则如果同一机架内存在DN，就读取同机架节点的副本</p></li></ul><h2 id="七、环境搭建"><a href="#七、环境搭建" class="headerlink" title="七、环境搭建"></a>七、环境搭建</h2><h3 id="1、基础设施设置"><a href="#1、基础设施设置" class="headerlink" title="1、基础设施设置"></a>1、基础设施设置</h3><ul><li><p>设置网络IP</p><p>vm编辑-&gt;虚拟网略编辑器-&gt;查看NAT模式的地址</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi /etc/sysconfig/network-scripts/ifcfg-ens33DEVICE=ens33TYPE=EthernetONBOOT=yesNM_CONTROLLED=yesIPADDR=192.168.220.128NETMASK=255.255.255.0GATEWAY=192.168.220.2DNS1=223.5.5.5DNS2=114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置主机名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi /etc/sysconfig/networkNETWORKING=yesHOSTNAME=node1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置本机IP到主机名映射关系</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi /etc/hosts192.168.220.128 node1192.168.220.129 node2192.168.220.130 node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关闭防火墙&amp;selinux</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl status firewalld systemctl stop firewalldsystemctl disable firewalldvi /etc/selinux/configSELINUX=disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同步服务器时间</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#ntp服务器同步方式yum install ntp -yvi /etc/ntp.confserver ntp1.aliyun.comservice ntpd startchkconfig ntpd on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装jdk</p><p>rpm安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi /etc/profileexport JAVA_HOME=/usr/java/jdk1.8.0_221export JAVA_BIN=/usr/java/jdk1.8.0_221/binexport PATH=$PATH:$JAVA_HOME/binexport CLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarsource /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>SSH免密登录</p><p>验证：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@ch5 java]# ssh localhostroot@localhost's password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t dsa -P '' -f /root/.ssh/id_dsa #生成公钥密钥到.ssh下[root@ch5 .ssh]# ll总用量 12-rw-------. 1 root root 668 1月  20 20:20 id_dsa-rw-r--r--. 1 root root 607 1月  20 20:20 id_dsa.pub-rw-r--r--. 1 root root 171 1月  20 08:24 known_hostscat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys #A想访问B，authorized_keys得有B的id_dsa.pub 信息[root@ch5 .ssh]# ll总用量 16-rw-r--r--. 1 root root 607 1月  20 20:23 authorized_keys-rw-------. 1 root root 668 1月  20 20:20 id_dsa-rw-r--r--. 1 root root 607 1月  20 20:20 id_dsa.pub-rw-r--r--. 1 root root 171 1月  20 08:24 known_hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、部署配置"><a href="#2、部署配置" class="headerlink" title="2、部署配置"></a>2、部署配置</h3><ul><li><p>规划路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir /opt/wps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压软件包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -xf hadoop-2.10.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置hadoop环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi /etc/profileexport HADOOP_HOME=/opt/wps/hadoop-2.10.1export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbinsource /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>服务配置:/opt/wps/hadoop-2.10.1/etc/hadoop</p><ul><li><p>hadoop-env.sh：</p><p>修改export JAVA_HOME=${JAVA_HOME}，因为集群SSH免密连接执行时不会加载profile</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi hadoop-env.sh export JAVA_HOME=/usr/java/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>core-site.xml:定义NN在哪里启动</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://node1:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>hdfs-site.xml:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--副本数量--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--NN元数据存放位置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/var/wps/hadoop/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--DN块数据存放位置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/var/wps/hadoop/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--SNN启动位置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>node1:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--SNN为NN做FS滚动更新数据存放位置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/var/wps/hadoop/dfs/secondary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>slaves：定义DN在哪里启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">node1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>初始化启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs namenode -formatstart-dfs.sh[root@ch5 hadoop]# jps54134 SecondaryNameNode53800 NameNode54269 Jps53950 DataNode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>访问web端</p><p><a href="http://192.168.220.128:50070/">http://192.168.220.128:50070/</a></p></li><li><p>简单使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs dfs -mkdir /wpshdfs dfs -put test.txt /wpshdfs dfs -ls /wpsFound 1 items-rw-r--r--   1 root supergroup          0 2021-01-20 22:00 /wps/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证前面的两个知识点</p><p>FS+EL的滚动更新</p><p>Block块的切割</p></li></ul><h3 id="3、集群环境搭建"><a href="#3、集群环境搭建" class="headerlink" title="3、集群环境搭建"></a>3、集群环境搭建</h3><ul><li>规划节点</li></ul><table><thead><tr><th>节点</th><th>NN</th><th>SNN</th><th>DN</th></tr></thead><tbody><tr><td>node1</td><td>√</td><td></td><td></td></tr><tr><td>node2</td><td></td><td>√</td><td>√</td></tr><tr><td>node3</td><td></td><td></td><td>√</td></tr><tr><td>node4</td><td></td><td></td><td>√</td></tr></tbody></table><ul><li><p>SSH免密</p><p>在哪里启动，哪台节点就需要对其他公开自己的公钥</p><p>没有.ssh先ssh登录下自己</p><p>node1分发公钥到其他节点：</p><p>scp /root/.ssh/id_dsa.pub node2:/root/.ssh/node1.pub</p><p>scp /root/.ssh/id_dsa.pub node3:/root/.ssh/node1.pub</p><p>scp /root/.ssh/id_dsa.pub node4:/root/.ssh/node1.pub</p><p>其他节点上分别：cd ~/.ssh</p><p>cat node1.pub &gt;&gt; authorized_keys写入公钥信息</p></li><li><p>部署配置</p><p>分别调整core-site.xml、hdfs-site.xml、slaves配置对应角色信息</p><p>分发给其他节点</p><p>cd /opt</p><p>scp -r ./wps/ node2:‘pwd’</p><p>scp -r ./wps/ node3:‘pwd’</p><p>scp -r ./wps/ node4:‘pwd’</p></li><li><p>格式化启动</p></li></ul><h2 id="八、HDFS-HA模式"><a href="#八、HDFS-HA模式" class="headerlink" title="八、HDFS HA模式"></a>八、HDFS HA模式</h2><h3 id="1、主从架构分析"><a href="#1、主从架构分析" class="headerlink" title="1、主从架构分析"></a>1、主从架构分析</h3><ul><li>主从集群结构相对简单、组从协作</li><li>主节点单点，数据一致性好掌握</li><li>但主节点存在单点故障、集群整体不可用</li><li>单主压力过大，内存受限</li></ul><h3 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><ul><li><p>单点故障</p><p>高可用方案HA</p><p>多个NN，主备切换</p><img src="/posts/e1db/fsha.png" class=""></li><li><p>主备切换</p><p>人工？</p><p>引入zk分布式协调实现自动切换</p><ul><li>zkfc进程绑定在NN节点，检测NN状态，与ZK通信</li><li>主备上线通过zkfc在zk上抢锁-临时节点，成功为主，失败为备，并注册事件回调</li><li>主挂，节点删除，回调机制通知被抢锁</li><li>被抢到锁还与先主通信，询问是否挂掉，将自己升为主，将先主降为备</li></ul></li><li><p>压力过大，内存受限</p><p>联邦机制，元数据分片</p><p>多个NN，管理不同元数据</p><img src="/posts/e1db/federation.jpg" class=""><p>元数据分治，复用DN</p><p>元数据访问隔离，不同的文件通过不同的NN上传</p><p>DN目录隔离Block，只有对应的NN才能找到自己管辖的Block数据</p></li></ul><ul><li>hadoop 2.x只支持一主一备，3.x支持一主多备</li></ul><h3 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h3><ul><li>主备切换就会出现数据一致性问题，如何解决，分布式系统CAP理论，CA or CP</li><li>强一致性（最终一致性）破坏可用性，即主备数据同步阻塞，最终成功才返回正常</li><li>Paxos协议-简化-过半原则，引入中间层实现数据同步，中和一致性和可用性 </li></ul><h3 id="4、HA环境搭建"><a href="#4、HA环境搭建" class="headerlink" title="4、HA环境搭建"></a>4、HA环境搭建</h3><ul><li>规划节点</li></ul><table><thead><tr><th>节点</th><th>NN</th><th>NN</th><th>JN</th><th>DN</th><th>ZKFC</th><th>ZK</th></tr></thead><tbody><tr><td>node1</td><td>√</td><td></td><td></td><td></td><td>√</td><td></td></tr><tr><td>node2</td><td></td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>node3</td><td></td><td></td><td>√</td><td>√</td><td></td><td>√</td></tr><tr><td>node4</td><td></td><td></td><td>√</td><td>√</td><td></td><td>√</td></tr></tbody></table><ul><li><p>基础环境</p><p>增加两台NN节点间的SSH免密通信，ZKFC是和NN一起的，用于ZKFC检查对方NN的状态</p></li><li><p>角色部署</p><ul><li><p>zk</p><p>zk集群搭建</p></li><li><p>hdfs</p><ul><li><p>hdfs-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--定义NN映射关系--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.nameservices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.namenodes.mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>nn1,nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--两台NN启动位置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.rpc-address.mycluster.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>node1:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.rpc-address.mycluster.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>node2:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--两台NN web访问入口--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.http-address.mycluster.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>node1:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.http-address.mycluster.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>node2:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--qjournal入口，/mycluster为当前集群数据存储目录，与其他集群隔离--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.client.failover.proxy.provider.mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.shared.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>qjournal://node2:8485;node3:8485;node4:8485/mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--qjournal数据存储位置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.journalnode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/var/wps/hadoop/ha/dfs/jn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SSH方式主备切换--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.fencing.methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>sshfence<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SSH私钥--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.fencing.ssh.private-key-files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/root/.ssh/id_rsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--启用主备自动切换--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>core-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置zk集群地址--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>ha.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>node2:2181,node3:2181,node4:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>分发配置到各个节点</p></li></ul></li><li><p>启动集群</p><ul><li><p>先启动JN</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hadoop-daemon.sh start journalnode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>选择一个NN做格式化并启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs namenode -format #只有第一次搭建集群时做hadoop-daemon.sh start namenode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在另外一台NN中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs namenode -bootstrapStandby<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>格式化zk</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs zkfc -formatZK#只有第一次搭建集群时做<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">start-dfs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>验证HA</p><p>。。。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse学习笔记</title>
      <link href="posts/3a77.html"/>
      <url>posts/3a77.html</url>
      
        <content type="html"><![CDATA[<p>​    </p><h2 id="一、初识"><a href="#一、初识" class="headerlink" title="一、初识"></a>一、初识</h2><p>​      战斗民族一家名为<code>Yandex</code>的公司研发，起初用于该团队内部<code>Metrica</code>产品，具有<code>ROLAP</code>、在线实时查询、完整的<code>DBMS</code>、列式存储、不需要任何数据预处理、支持批量更新、拥有非常完善的<code>SQL</code>支持和函数、支持高可用、不依赖<code>Hadoop</code>复杂生态、开箱即用等许多特点。初学最深刻的印象就是他具有丰富的引擎机制，不同的引擎具有不同的实现特征，适用于一些特殊场景。例如用于增量数据聚合的<code>AggregatingMergeTree</code>，我司正实践通过它创建物化视图来聚合分析数据，以替代原有<code>hadoop</code>生态，转向轻量化。</p><ul><li><p>应用场景：<br><code>1.</code>绝大多数请求都是用于读访问的<br><code>2.</code>数据需要以大批次（大于1000行）进行更新，而不是单行更新；或者根本没有更新操作<br><code>3.</code>数据只是添加到数据库，没有必要修改<br><code>4.</code>读取数据时，会从数据库中提取出大量的行，但只用到一小部分列<br><code>5.</code>表很“宽”，即表中包含大量的列<br><code>6.</code>查询频率相对较低（通常每台服务器每秒查询数百次或更少）<br><code>7.</code>对于简单查询，允许大约50毫秒的延迟<br><code>8.</code>列的值是比较小的数值和短字符串（例如，每个URL只有60个字节）<br><code>9.</code>在处理单个查询时需要高吞吐量（每台服务器每秒高达数十亿行）<br><code>10.</code>不需要事务<br><code>11.</code>数据一致性要求较低<br><code>12.</code>每次查询中只会查询一个大表。除了一个大表，其余都是小表<br><code>13.</code>查询结果显著小于数据源。即数据有过滤或聚合。返回结果不超过单个服务器内存大小</p></li><li><p>本身的限制</p><p><code>1.</code>不支持真正的删除/更新支持 不支持事务（期待后续版本支持）<br><code>2.</code>不支持二级索引<br><code>3.</code>有限的SQL支持，join实现与众不同<br><code>4.</code>不支持窗口功能<br><code>5.</code>元数据管理需要人工干预维护</p><p>以上粘贴复制，后续学习种体会其中奥秘。</p></li></ul><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>  <code>clickhouse</code>架构灵活,可以单节点安装,也可以多节点安装 !操作十分便捷, 多节点安装,在多个机器上分别安装<code>Clickhouse</code>,然后安装按成以后做集群配置即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1)安装curl工具yum install -y curl2)添加clickhouse的yum镜像curl -s https://packagecloud.io/install/repositories/altinity/clickhouse/script.rpm.sh | sudo bash3)检查镜像情况[root@doit04 yum.repos.d]# yum list | grep clickhouse                        clickhouse-client.x86_64                    20.5.4.40-1.el7            @Altinity_clickhouseclickhouse-common-static.x86_64             20.5.4.40-1.el7            @Altinity_clickhouse4)安装clickhouse的服务端和客户端yum install -y clickhouse-server clickhouse-client5)启动服务端service clickhouse-server start 6)启动交互式客户端clickhouse-client  -m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  交互式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@linux01 flink-1.11.2]# clickhouse-client  -mClickHouse client version 20.8.3.18.Connecting to localhost:9000 as user default.Connected to ClickHouse server version 20.8.3 revision 54438.SHOW DATABASES┌─name───────────────────────────┐│ _temporary_and_external_tables ││ db_ch_mysql                    ││ db_doit19                      ││ default                        ││ system                         │└────────────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>Dbeaver</code>连接：</p><p>​        1、确认<code>clickhouse</code>可以被监听</p><img src="/posts/3a77/image-20210118201639303.png" class=""><p>​        2、修改配置文件并重启</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim /etc/clickhouse-server/config.xml&lt;listen_host&gt;::&lt;/listen_host&gt;systemctl restart clickhouse-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/3a77/image-20210118201827910.png" class=""><p>​        3、工具连接信息</p><img src="/posts/3a77/image-20210118201913609.png" class=""><h2 id="三、-引擎"><a href="#三、-引擎" class="headerlink" title="三、 引擎"></a>三、 引擎</h2><h3 id="1、引擎的作用"><a href="#1、引擎的作用" class="headerlink" title="1、引擎的作用"></a>1、引擎的作用</h3><ul><li>数据存储的位置</li><li>数据组织结构</li><li>是否分块、是否索引、是否持久化</li><li>是否并发读写</li><li>是否支持副本，是否支持分布式</li><li>等。。。一系列属性</li></ul><h3 id="2、库引擎"><a href="#2、库引擎" class="headerlink" title="2、库引擎"></a>2、库引擎</h3><ul><li><p><code>clickhous</code> 默认数据库引擎</p><p>默认情况下<code>ClickHouse</code>使用自己的数据库引擎，该默认引擎提供可配置的数据库引擎和所有支持的SQL语法.</p></li><li><p>mysql 引擎</p><p>用于将远程的<code>MySQL</code>服务器中的表映射到<code>ClickHouse</code>中，并允许您对表进行<code>INSERT</code>和<code>SELECT</code>查询，以方便在ClickHouse与MySQL之间进行数据交换。<code>MySQL</code>数据库引擎会将对其的查询转换为MySQL语法并发送到MySQL服务器中，因此可以执行诸如<code>SHOW TABLES</code>或<code>SHOW CREATE TABLE</code>之类的操作。但无法对其执行以下操作：</p><ul><li><code>RENAME</code></li><li><code>CREATE TABLE</code></li><li><code>ALTER</code></li></ul></li><li><p>lazy 引擎</p><p>在距最近一次访问间隔<code>expiration_time_in_seconds</code>时间段内，将表保存在内存中，仅适用于 *Log引擎表</p></li></ul><h3 id="3、表引擎"><a href="#3、表引擎" class="headerlink" title="3、表引擎"></a>3、表引擎</h3><p>  表引擎可以分为以下几类,不同引擎满足不同场景的需求</p><table><thead><tr><th>引擎分类</th><th>引擎名称</th></tr></thead><tbody><tr><td>MergeTree系列</td><td>MergeTree 、ReplacingMergeTree 、SummingMergeTree 、 AggregatingMergeTree CollapsingMergeTree 、 VersionedCollapsingMergeTree 、GraphiteMergeTree</td></tr><tr><td>Log系列</td><td>TinyLog 、StripeLog 、Log</td></tr><tr><td>Integration Engines</td><td>Kafka 、MySQL、ODBC 、JDBC、HDFS</td></tr><tr><td>Special Engines</td><td>Distributed 、MaterializedView、 Dictionary 、Merge 、File、Null 、Set 、Join 、 URL View、Memory 、 Buffer</td></tr></tbody></table><p>  常规建表语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>db<span class="token punctuation">.</span><span class="token punctuation">]</span>table_name <span class="token punctuation">[</span><span class="token keyword">ON</span> CLUSTER cluster<span class="token punctuation">]</span><span class="token punctuation">(</span>    name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>    name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">INDEX</span> index_name1 expr1 <span class="token keyword">TYPE</span> type1<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> GRANULARITY value1<span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> index_name2 expr2 <span class="token keyword">TYPE</span> type2<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> GRANULARITY value2<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SAMPLE <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SETTINGS name<span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>ENGINE：表的引擎类型，MergeTree要求有一个日期字段，还有主键</p></li><li><p>PARTITION BY — 分区键</p></li><li><p>ORDER BY — 排序键</p></li><li><p>PRIMARY KEY — 主键，默认情况下主键跟排序键（由 ORDER BY 子句指定）相同</p></li><li><p>SAMPLE BY — 用于抽样的表达式，如果要用抽样表达式，主键中必须包含这个表达式。</p></li><li><p>SETTINGS — 影响 MergeTree 性能的额外参数 index_granularity — 索引粒度</p></li></ul><h4 id="3-1-MergeTree系列"><a href="#3-1-MergeTree系列" class="headerlink" title="3.1 MergeTree系列"></a>3.1 MergeTree系列</h4><p>  <code>MergeTree</code>系列的表引擎是<code>ClickHouse</code>数据存储功能的核心。它们提供了用于弹性和高性能数据检索的大多数功能：列存储，自定义分区，稀疏的主索引，辅助数据跳过索引等.基本<code>MergeTree</code>表引擎可以被认为是单节点<code>ClickHouse</code>实例的默认表引擎，因为它在各种用例中通用且实用。</p><h5 id="3-1-1ReplacingMergeTree"><a href="#3-1-1ReplacingMergeTree" class="headerlink" title="3.1.1ReplacingMergeTree"></a>3.1.1<code>ReplacingMergeTree</code></h5><p>  会删除排序键值相同的重复项,自动帮你筛选出来最新的一条数据，并删掉之前重复的数据。类似于mongo的updateOne，先增后删。<strong>但注意</strong>：数据的去重只会在数据合并期间进行，但数据合并时机不确定，即异步进行。另外在分布式场景下，相同primary key的数据可能被sharding到不同节点上，不同shard间可能无法去重。</p><p>  场景测试：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> replacing_table<span class="token punctuation">(</span><span class="token keyword">data</span> <span class="token keyword">Date</span><span class="token punctuation">,</span>id UInt64<span class="token punctuation">,</span>name String<span class="token punctuation">,</span><span class="token keyword">value</span> UInt32<span class="token punctuation">,</span><span class="token keyword">timestamp</span> <span class="token keyword">DateTime</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span>ReplacingMergeTree<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">,</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8192</span><span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  引擎属性解释：分区键-data，排序键-（id，name），索引粒度-8192，version-timestamp；相同的id、name属性的记录会去重，如果指定version，则取version最大，否则取最新记录</p><p>  <code>java</code>连接<code>clickhouse</code>写入数据：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> v <span class="token operator">=</span> j<span class="token operator">*</span>i<span class="token punctuation">;</span>                <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into replacing_table values ('2021-01-18', "</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">", 'wps',"</span><span class="token operator">+</span>v<span class="token operator">+</span><span class="token string">", "</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">");"</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token operator">+</span><span class="token string">"_i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"_j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">executeSql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token class-name">ClickHouseProperties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClickHouseProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClickHouseDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClickHouseDataSource</span><span class="token punctuation">(</span><span class="token string">"jdbc:clickhouse://192.168.220.128:8123/wps"</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClickHouseConnection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClickHouseStatement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> execute <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  多次运行数据测试：</p><img src="/posts/3a77/image-20210118212636174.png" class=""><img src="/posts/3a77/image-20210118212428269.png" class=""><p>  测试结果可以看出：数据会按排序键id,name相同的记录去重，且多次运行立即查看数据会发现有重复的现象，之后再查询就会到异步去重后的数据</p><h5 id="3-1-2-CollapsingMergeTree"><a href="#3-1-2-CollapsingMergeTree" class="headerlink" title="3.1.2 CollapsingMergeTree"></a>3.1.2 <code>CollapsingMergeTree</code></h5><ul><li><p>该引擎要求在建表语句中指定一个标记列Sign，后台Compaction时会将主键相同、Sign相反的行进行折叠，也即删除</p></li><li><p>Sign的值分为两类：Sign=1的行称之为状态行，Sign=-1的行称之为取消行</p></li><li><p>每次需要新增状态时，写入一行状态行；需要删除状态时，则写入一行取消行</p></li><li><p>在后台Compaction时，状态行与取消行会自动做折叠（删除）处理。而尚未进行Compaction的数据，状态行与取消行同时存在</p></li><li><p>删除操作需要写入与原数据除Sign值外一摸一样的数据</p></li><li><p>由于查询时可能数据未合并，且无法保证相同key落在同一节点上，因此查询时聚合操作需要调整：count() - count(Sign)，sum(col) - sum(col*Sign)</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>db<span class="token punctuation">.</span><span class="token punctuation">]</span>table_name <span class="token punctuation">[</span><span class="token keyword">ON</span> CLUSTER cluster<span class="token punctuation">]</span><span class="token punctuation">(</span>    name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>    name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> CollapsingMergeTree<span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SAMPLE <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SETTINGS name<span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  场景测试：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_collapse<span class="token punctuation">(</span>    id UInt64<span class="token punctuation">,</span>    <span class="token keyword">value</span> UInt32<span class="token punctuation">,</span>    elpace UInt32<span class="token punctuation">,</span>    Sign Int8<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> CollapsingMergeTree<span class="token punctuation">(</span>Sign<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_collapse <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_collapse <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>optimize后：</p><img src="/posts/3a77/image-20210119193302597.png" class=""><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_collapse <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>optimize后：</p><img src="/posts/3a77/image-20210119193432652.png" class=""><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_collapse <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>optimize后：</p><img src="/posts/3a77/image-20210119193530809.png" class=""><p><strong>  <code>CollapsingMergeTree</code>虽然解决了主键相同的数据即时删除的问题，但是状态持续变化且多线程并行写入情况下，状态行与取消行位置可能乱序，导致无法正常折叠,如下示例：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 先插入取消行再插入状体行</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_collapse <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_collapse <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">optimize</span> <span class="token keyword">table</span> test_collapse final<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test_collapse<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/3a77/image-20210119193917619.png" class=""><p>optimize后数据并没有合并</p><h5 id="3-1-3-VersionedCollapsingMergeTree"><a href="#3-1-3-VersionedCollapsingMergeTree" class="headerlink" title="3.1.3 VersionedCollapsingMergeTree"></a>3.1.3 <code>VersionedCollapsingMergeTree</code></h5><p>  为了解决<code>CollapsingMergeTree</code>乱序写入情况下无法正常折叠问题，<code>VersionedCollapsingMergeTree</code>表引擎在建表语句中新增了一列Version，用于在乱序情况下记录状态行与取消行的对应关系。主键相同，且Version相同、Sign相反的行，在Compaction时会被删除。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">(</span>    name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>    name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> VersionedCollapsingMergeTree<span class="token punctuation">(</span>sign<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SAMPLE <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SETTINGS name<span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  场景测试：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_version_collapse<span class="token punctuation">(</span>    id UInt64<span class="token punctuation">,</span>    <span class="token keyword">value</span> UInt32<span class="token punctuation">,</span>    elpace UInt32<span class="token punctuation">,</span>    Sign Int8<span class="token punctuation">,</span>    Version UInt8<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> VersionedCollapsingMergeTree<span class="token punctuation">(</span>Sign<span class="token punctuation">,</span> Version<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span class="token comment">-- 先插入取消行再插入状体行</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_version_collapse <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_version_collapse <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">optimize</span> <span class="token keyword">table</span> test_version_collapse final<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test_version_collapse<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-1-4SummingMergeTree"><a href="#3-1-4SummingMergeTree" class="headerlink" title="3.1.4SummingMergeTree"></a>3.1.4<code>SummingMergeTree</code></h5><p>  当合并 <code>SummingMergeTree</code> 表的数据片段时，ClickHouse 会把所有具有相同主键的行合并为一行，该行包含了被合并的行中具有数值数据类型的列的汇总值。如果主键的组合方式使得单个键值对应于大量的行，则可以显著的减少存储空间并加快数据查询的速度。使用 <code>SummingMergeTree</code> 可以来存储聚合数据(求和累加)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">(</span>    name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>    name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> SummingMergeTree<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">columns</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SAMPLE <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SETTINGS name<span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>columns</p><p>包含了将要被汇总的列的列名的元组。可选参数，所选的列必须是数值类型，并且不可位于主键中。如果没有指定 <code>columns</code>，<code>ClickHouse</code> 会把所有不在主键中的数值类型的列都进行汇总。</p></li></ul><p>  场景测试：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> summtt<span class="token punctuation">(</span>    <span class="token keyword">key</span> String<span class="token punctuation">,</span>    value1 UInt32<span class="token punctuation">,</span>    value2 UInt32<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> SummingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> summtt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> summtt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> summtt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> summtt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> summtt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> summtt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> summtt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/3a77/image-20210119123615846.png" class=""><p>  同<code>ReplacingMergeTree</code>，数据的合并也是异步的，因此查询中使用还是需要使用聚合函数 <code>sum</code> 和 <code>GROUP BY</code> 子句。</p><h5 id="3-1-5-AggregatingMergeTree"><a href="#3-1-5-AggregatingMergeTree" class="headerlink" title="3.1.5 AggregatingMergeTree"></a>3.1.5 <code>AggregatingMergeTree</code></h5><ul><li>会将一个数据片段内所有具有相同主键（准确的说是排序键)的行替换成一行，这一行会存储一系列聚合函数的状态</li><li>可以使用 <code>AggregatingMergeTree</code> 表来做增量数据的聚合统计，包括物化视图的数据聚合</li><li>该引擎需结合<code>AggregateFunction</code>数据类型的列使用</li></ul><p>  与<code>SummingMergeTree</code> 相比，<code>AggregatingMergeTree</code> 可以做除sum求和外其他常用的聚合操作，如min、max、avg等</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>db<span class="token punctuation">.</span><span class="token punctuation">]</span>table_name <span class="token punctuation">[</span><span class="token keyword">ON</span> CLUSTER cluster<span class="token punctuation">]</span><span class="token punctuation">(</span>    name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>    name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> AggregatingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SAMPLE <span class="token keyword">BY</span> expr<span class="token punctuation">]</span><span class="token punctuation">[</span>TTL expr<span class="token punctuation">]</span><span class="token punctuation">[</span>SETTINGS name<span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>SELECT和INSERT </p><p>要插入数据，需使用带有 -State- 聚合函数的 INSERT SELECT 语句</p><p>从 <code>AggregatingMergeTree</code> 表中查询数据时，需使用 <code>GROUP BY</code> 子句并且要使用与插入时相同的聚合函数，但后缀要改为 <code>-Merge</code></p></li><li><p>聚合物化视图示例</p><p>基于数据原表聚合成1小时为粒度的时序数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 基础表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> t_m_test_aggregates<span class="token punctuation">(</span>id UInt64<span class="token punctuation">,</span>name String<span class="token punctuation">,</span>elapse UInt64<span class="token punctuation">,</span>acceptTime <span class="token keyword">DateTime</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>ReplacingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>toYYYYMMDD<span class="token punctuation">(</span>acceptTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>acceptTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 物化视图</span><span class="token keyword">CREATE</span> MATERIALIZED <span class="token keyword">VIEW</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> m_test_aggregates<span class="token keyword">ENGINE</span><span class="token operator">=</span>AggregatingMergeTree<span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMMDD<span class="token punctuation">(</span>acceptTime<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>acceptTime<span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sumState<span class="token punctuation">(</span>elapse<span class="token punctuation">)</span> <span class="token keyword">as</span> sumElapse<span class="token punctuation">,</span>avgState<span class="token punctuation">(</span>elapse<span class="token punctuation">)</span> <span class="token keyword">as</span> avgElapse<span class="token punctuation">,</span>countState<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> totalCount<span class="token punctuation">,</span>acceptTime<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>elapse<span class="token punctuation">,</span>toDateTime<span class="token punctuation">(</span>formatDateTime<span class="token punctuation">(</span>acceptTime<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> acceptTime<span class="token keyword">FROM</span> t_m_test_aggregates<span class="token punctuation">)</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>acceptTime<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_m_test_aggregates <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>toDateTime<span class="token punctuation">(</span><span class="token string">'2021-01-19 14:26:01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>toDateTime<span class="token punctuation">(</span><span class="token string">'2021-01-19 14:56:01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>toDateTime<span class="token punctuation">(</span><span class="token string">'2021-01-19 15:10:01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>toDateTime<span class="token punctuation">(</span><span class="token string">'2021-01-19 15:40:01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>toDateTime<span class="token punctuation">(</span><span class="token string">'2021-01-19 15:40:01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sumMerge<span class="token punctuation">(</span>sumElapse<span class="token punctuation">)</span> <span class="token keyword">as</span> sumElapse<span class="token punctuation">,</span>avgMerge<span class="token punctuation">(</span>avgElapse<span class="token punctuation">)</span> <span class="token keyword">as</span> avgElapse<span class="token punctuation">,</span>countMerge<span class="token punctuation">(</span>totalCount<span class="token punctuation">)</span> <span class="token keyword">as</span> totalCount<span class="token punctuation">,</span>acceptTime<span class="token keyword">FROM</span> m_test_aggregates<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>acceptTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/3a77/image-20210119141334458.png" class=""></li></ul><h4 id="3-2-Integration引擎"><a href="#3-2-Integration引擎" class="headerlink" title="3.2 Integration引擎"></a>3.2 Integration引擎</h4><h5 id="3-2-1-MySQL"><a href="#3-2-1-MySQL" class="headerlink" title="3.2.1 MySQL"></a>3.2.1 MySQL</h5><p>  使用mysql表引擎可以与mysql数据库中的数据表建⽴映射，并通过SQL向其发起远程查询或插入数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>db<span class="token punctuation">.</span><span class="token punctuation">]</span>table_name <span class="token punctuation">[</span><span class="token keyword">ON</span> CLUSTER cluster<span class="token punctuation">]</span><span class="token punctuation">(</span>    name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span> <span class="token punctuation">[</span>TTL expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>    name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span> <span class="token punctuation">[</span>TTL expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MySQL<span class="token punctuation">(</span><span class="token string">'host:port'</span><span class="token punctuation">,</span> <span class="token string">'database'</span><span class="token punctuation">,</span> <span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">[</span><span class="token punctuation">,</span> replace_query<span class="token punctuation">,</span> <span class="token string">'on_duplicate_clause'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>host:port：表示MySQL的地址和端⼝。</li><li>database：表示数据库的名称。</li><li>table：表示需要映射的表名称。</li><li>user：表示MySQL的⽤户名。</li><li>password：表示MySQL的密码。</li><li>replace_query：默认为0，对应MySQL的REPLACE INTO语法。如果将它设置为1，则会⽤REPLACE INTO代替INSERT INTO。</li><li>on_duplicate_clause：默认为0，对应MySQL的ON DUPLICATE KEY语法。如果需要使⽤该设置，则必须将replace_query设置成0。</li></ul><p>场景测试：</p><ul><li><p>mysql 表如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>mysql_table<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>createTime<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8  <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'测试表'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mysql_table<span class="token punctuation">(</span>name<span class="token punctuation">,</span>createTime<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'wps'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mysql_table<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>clickhouse表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ch_table<span class="token punctuation">(</span>    id Int32<span class="token punctuation">,</span>    name String<span class="token punctuation">,</span>    createTime <span class="token keyword">DateTime</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MySQL<span class="token punctuation">(</span><span class="token string">'192.168.220.128:3306'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'mysql_table'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ch_table<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/3a77/image-20210120200925299.png" class=""></li></ul><h5 id="3-2-2-MySQL"><a href="#3-2-2-MySQL" class="headerlink" title="3.2.2 MySQL"></a>3.2.2 MySQL</h5><h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程正确结束的两种方式</title>
      <link href="posts/c767.html"/>
      <url>posts/c767.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、错误的方式"><a href="#一、错误的方式" class="headerlink" title="一、错误的方式"></a>一、错误的方式</h2><p>  禁止使用stop方法停止线程,强制中断线程会出现不可预料的程序错误，如下示例会演示出现问题的可能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//实现一致性</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task interrupt when sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">",j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadStopTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main Thread interrupt when sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>t<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//确保线程结束</span><span class="token punctuation">}</span>task<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  运行结果：i=1,j=0，可见，stop方法强行终止，破坏了同步代码块的一致性，违背了我们设计程序的用意，因此停止使用。</p><h2 id="二、正确的结束方法"><a href="#二、正确的结束方法" class="headerlink" title="二、正确的结束方法"></a>二、正确的结束方法</h2><h3 id="1、interrupt-方法中断线程"><a href="#1、interrupt-方法中断线程" class="headerlink" title="1、interrupt()方法中断线程"></a>1、interrupt()方法中断线程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadStopTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务执行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task interrupt when sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序运行结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>interrupt()**方法会中断线程，设置中断标志位，</strong>Thread.currentThread().isInterrupted()** 判断线程状态，在合适的时间停止线程。==特别注意：==sleep方法会剖出中断异常，清除中断标志，如果想继续后续处理，保证数据一致性，就不能在catch块中退出线程，因此需要再次设置自己中断标志，才能时一次执行完整再正确结束</p><p>  与线程中断的API有以下三个：</p><ul><li>public void interrupt()</li><li>public static boolean interrupted()</li><li>public boolean isInterrupted()</li></ul><p>​        需要注意isInterrupted()只返回线程中断标志，但 interrupted()同时会清除标志位    </p><h2 id="2、设置标志位"><a href="#2、设置标志位" class="headerlink" title="2、设置标志位"></a>2、设置标志位</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadStopTest</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务执行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序运行结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  用于循环执行的任务中，我们增加一个flag用来标志任务是否结束，原理与interrupt()设置中断状态一致,但标志位变量必须保证可见性</p>]]></content>
      
      
      <categories>
          
          <category> 多线程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程间通信三种方式代码实现</title>
      <link href="posts/459b.html"/>
      <url>posts/459b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、jdk弃用suspend-resume方式"><a href="#一、jdk弃用suspend-resume方式" class="headerlink" title="一、jdk弃用suspend/resume方式"></a>一、jdk弃用suspend/resume方式</h2><p>  当前线程调用suspend方法会被挂起，当再次调用resume时恢复执行。但suspend操作不会释放锁，容易造成死锁，且suspend必须在resume方法之前执行，编写程序易出死锁BUG，因此被jdk弃用。以生产者-消费者模型，我们分别演示下正常使用与死锁情况：</p><h3 id="1、正常情况"><a href="#1、正常情况" class="headerlink" title="1、正常情况"></a>1、正常情况</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCmuTest</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> soySauce <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> BLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>soySauce <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"酱油没了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 进入等待状态</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打到酱油回家了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>soySauce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//恢复thread可执行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知酱油到货了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>酱油没了…<br>通知酱油到货了…<br>打到酱油回家了…</p><h3 id="2、同步块中请求同一把锁造成死锁"><a href="#2、同步块中请求同一把锁造成死锁" class="headerlink" title="2、同步块中请求同一把锁造成死锁"></a>2、同步块中请求同一把锁造成死锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCmuTest</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> soySauce <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> BLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>soySauce <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>BLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"酱油没了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 进入等待状态,不会释放BLOCK锁</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打到酱油回家了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>BLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//主线程这里拿不到BLOCK锁对象，造成死锁</span>soySauce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知酱油到货了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>酱油没了…</p><h3 id="3、执行顺序造成死锁"><a href="#3、执行顺序造成死锁" class="headerlink" title="3、执行顺序造成死锁"></a>3、执行顺序造成死锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCmuTest</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> soySauce <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> BLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>soySauce <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"酱油没了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5秒之后再挂起</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 进入等待状态</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打到酱油回家了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>soySauce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里resume先执行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知酱油到货了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>酱油没了…<br>通知酱油到货了…</p><h2 id="二、wait-notify通信"><a href="#二、wait-notify通信" class="headerlink" title="二、wait/notify通信"></a>二、wait/notify通信</h2><p>  wait/notify方法必须由持有同一对象锁的线程调用，及同步代码块中，wait方法使当前线程进入等待状态，并且释放当前锁，等待其他线程调用notify/notifyAll唤醒。但wait/notify方法也与执行顺序有关，不然也会造成死锁状态。</p><h3 id="1、正常情况-1"><a href="#1、正常情况-1" class="headerlink" title="1、正常情况"></a>1、正常情况</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCmuTest</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> soySauce <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> BLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>soySauce <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>BLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"酱油没了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>BLOCK<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前线程进入等待状态并释放BLOCK锁</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打到酱油回家了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>soySauce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>BLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>BLOCK<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必须由同一持有BLOCK线程锁对象调用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知酱油到货了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>酱油没了…<br>通知酱油到货了…<br>打到酱油回家了…</p><h3 id="2、执行顺序造成死锁"><a href="#2、执行顺序造成死锁" class="headerlink" title="2、执行顺序造成死锁"></a>2、执行顺序造成死锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCmuTest</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> soySauce <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> BLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>soySauce <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待5秒再去获取锁进入等待状态</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>BLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"酱油没了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>BLOCK<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打到酱油回家了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>soySauce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>BLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>BLOCK<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处会比wait先执行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知酱油到货了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>通知酱油到货了…<br>酱油没了…</p><h2 id="三、park-unpark通信"><a href="#三、park-unpark通信" class="headerlink" title="三、park/unpark通信"></a>三、park/unpark通信</h2><p>  park/unpark需要使用LockSupport工具调用，当线程中调用park方法会进入等待状态，等待==许可颁发==，unpark方法会给指定线程颁发许可，恢复其可运行状态。park/unpark方法不要求执行顺序，先unpark颁发许可，再调park时已存在许可，会直接执行。但park/unpark不会释放锁，也会造成死锁情况。</p><h3 id="1、正常情况-2"><a href="#1、正常情况-2" class="headerlink" title="1、正常情况"></a>1、正常情况</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCmuTest</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> soySauce <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> BLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>soySauce <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"酱油没了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前线程进入等待许可状态</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打到酱油回家了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>soySauce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给thread线程许可，恢复其可运行状态</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知酱油到货了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>酱油没了…<br>通知酱油到货了…<br>打到酱油回家了…</p><h3 id="2、同步代码块请求同一把锁造成死锁"><a href="#2、同步代码块请求同一把锁造成死锁" class="headerlink" title="2、同步代码块请求同一把锁造成死锁"></a>2、同步代码块请求同一把锁造成死锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCmuTest</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> soySauce <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> BLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>soySauce <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>BLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"酱油没了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前线程进入等待许可状态，但不会释放BLOCK锁</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打到酱油回家了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>soySauce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>BLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//此时拿不到BLOCK锁，造成死锁</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给thread线程颁发许可</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知酱油到货了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>酱油没了…</p>]]></content>
      
      
      <categories>
          
          <category> 多线程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
